{"version":3,"file":"static/js/387.ad16b577.chunk.js","mappings":"8QAEaA,EAAaC,EAAAA,EAAAA,GAAH,6CAGVC,EAAaD,EAAAA,EAAAA,GAAH,iSAoBVE,EAASF,EAAAA,EAAAA,EAAH,yC,SCYnB,EAhCgB,WACd,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAeA,OAdAC,QAAQC,IAAIH,IAEZI,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,8GAEKC,EAAAA,EAAAA,IAAaT,GAFlB,OAEXG,EAFW,OAGjBC,EAAWD,GAHM,gDAKjBE,QAAQC,IAAR,MALiB,yDAAH,qDAQlBE,GACD,GAAE,CAACR,IAEsB,IAAnBG,EAAQO,QACb,4CAEA,SAACd,EAAD,UACGO,EAAQQ,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,UAAChB,EAAD,YACE,UAACC,EAAD,YACE,sCADF,IACwBc,MAExB,uBAAIC,MAJWF,EADN,KAUlB,C,+LClCDG,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAM,mCAECC,EAAa,mCAAG,sGACJF,EAAAA,EAAAA,IAAA,sCAAyCC,IADrC,uBAClBE,EADkB,EAClBA,KADkB,kBAElBA,EAAKC,SAFa,2CAAH,qDAKbC,EAAY,mCAAG,WAAOC,GAAP,yFACHN,EAAAA,EAAAA,IAAA,+BAAkCC,EAAlC,kBAA+CK,EAA/C,+CADG,uBACjBH,EADiB,EACjBA,KADiB,kBAEjBA,EAAKC,SAFY,2CAAH,sDAKZG,EAAS,mCAAG,WAAOtB,GAAP,yFACAe,EAAAA,EAAAA,IAAA,gBAAmBf,EAAnB,oBAAsCgB,EAAtC,oBADA,uBACdE,EADc,EACdA,KADc,kBAEdA,GAFc,2CAAH,sDAKTK,EAAS,mCAAG,WAAOvB,GAAP,yFACAe,EAAAA,EAAAA,IAAA,gBAAmBf,EAAnB,4BAA8CgB,EAA9C,oBADA,uBACdE,EADc,EACdA,KADc,kBAEdA,EAAKM,MAFS,2CAAH,sDAKTf,EAAY,mCAAG,WAAOT,GAAP,yFACHe,EAAAA,EAAAA,IAAA,gBAAmBf,EAAnB,4BAA8CgB,EAA9C,oBADG,uBACjBE,EADiB,EACjBA,KADiB,kBAEjBA,EAAKC,SAFY,2CAAH,qD","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","services/API.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ReviewList = styled.ul`\n  margin-top: 12px;\n`;\nexport const ReviewItem = styled.li`\n  font-size: 14px;\n  padding: 6px;\n  background-color: rgb(83, 11, 12);\n  border-radius: 14px;\n\n  :not(:last-child) {\n    margin-bottom: 12px;\n  }\n\n  span {\n    color: red;\n  }\n\n  //   p{\n  //     color: #888888;\n  //     margin-top: 6px;\n  //   }\n`;\n\nexport const Author = styled.p`\n  color: white;\n`;\n","import { movieReviews } from '../../services/API';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { ReviewList, ReviewItem, Author } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  console.log(reviews);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        const reviews = await movieReviews(movieId);\n        setReviews(reviews);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    fetchReviews();\n  }, [movieId]);\n\n  return reviews.length === 0 ? (\n    <h3> Sorry Nothing</h3>\n  ) : (\n    <ReviewList>\n      {reviews.map(({ id, author, content }) => (\n        <ReviewItem key={id}>\n          <Author>\n            <span>Author:</span> {author}\n          </Author>\n          <p>{content}</p>\n        </ReviewItem>\n      ))}\n    </ReviewList>\n  );\n};\nexport default Reviews;\n","import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst KEY = '21a8d7e14a9b5e9904fbfbdbadb21ca8';\n\nexport const movieTrending = async () =>{\n    const {data} = await axios.get(`trending/movie/week?api_key=${KEY}`);\n    return data.results;\n};\n\nexport const movieByQuery = async (query) =>{\n    const {data} = await axios.get(`search/movie?api_key=${KEY}&query=${query}&language=en-US&page=1&include_adult=false`);\n    return data.results;\n}\n\nexport const movieById = async (movieId) =>{\n    const {data} = await axios.get(`movie/${movieId}?api_key=${KEY}&language=en-US`);\n    return data;\n}\n\nexport const movieCast = async (movieId) =>{\n    const {data} = await axios.get(`movie/${movieId}/credits?api_key=${KEY}&language=en-US`);\n    return data.cast;\n}\n\nexport const movieReviews = async (movieId) =>{\n    const {data} = await axios.get(`movie/${movieId}/reviews?api_key=${KEY}&language=en-US`);\n    return data.results;\n}"],"names":["ReviewList","styled","ReviewItem","Author","movieId","useParams","useState","reviews","setReviews","console","log","useEffect","fetchReviews","movieReviews","length","map","id","author","content","axios","KEY","movieTrending","data","results","movieByQuery","query","movieById","movieCast","cast"],"sourceRoot":""}